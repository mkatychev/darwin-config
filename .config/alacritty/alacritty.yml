# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# These configuration files will be loaded in order, replacing values in files
# loaded earlier with those loaded later in the chain. The file itself will
# always be loaded last.
#import:
#  - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  TERM: xterm-256color-italic
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: alacritty

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
   columns: 0
   lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
   x: 0
   y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: none

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed

  # Window title
  title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  #dynamic_title: true

  # Window class (Linux/BSD only):
  #class:
    # Application instance name
    #instance: Alacritty
    # General application class
    #general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Scrolling distance multiplier.
  multiplier: 3

# Font configuration
# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    family: Hack Nerd Font
    style: Regular

  bold:
    family: Hack Nerd Font
    style: Italic

  italic:
    family: Hack Nerd Font
    style: Italic

  # Point size
  size: 11.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

# Colors (Wombat)
colors:
  # Default colors
  primary:
    background: "0x232627"
    foreground: "0xcfdbdd"

    dim_foreground: "0xeff0f1"
    bright_foreground: "0xffffff"
    dim_background: "0x31363b"
    bright_background: "0x000000"

  # Normal colors
  normal:
    black: "0x232627"
    red: "0xed1515"
    green: "0x11d116"
    yellow: "0xfdbc4b"
    blue: "0x1d99f3"
    magenta: "0x9b59b6"
    cyan: "0x1abc9c"
    white: "0xfcfcfc"

  # Bright colors
  bright:
    black: "0x7f8c8d"
    red: "0xc0392b"
    green: "0x1cdc9a"
    yellow: "0xfdbc4b"
    blue: "0x3daee9"
    magenta: "0x8e44ad"
    cyan: "0x16a085"
    white: "0xffffff"

  # Dim colors
  dim:
    black: "0x31363b"
    red: "0x783228"
    green: "0x17a262"
    yellow: "0xb65619"
    blue: "0x1b668f"
    magenta: "0x614a73"
    cyan: "0x186c60"
    white: "0x63686d"

    # Indexed Colors
    #
    # The indexed colors include all colors from 16 to 256.
    # When these are not set, they're filled with sensible defaults.
    #
    # Example:
    #   `- { index: 16, color: '0xff00ff' }`
    #
    indexed_colors: []


# Bell
#
# The bell is rung every time the BEL control character is received.
#bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  #animation: EaseOutExpo

  # Duration of the visual bell flash. A `duration` of `0` will disable the
  # visual bell animation.
  #duration: 0

  # Visual bell animation color.
  #color: '#ffffff'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  #command: None

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  # This string contains all characters that are used as separators for "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  #vi_mode_style: None

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
shell:
 program: /usr/local/bin/zsh
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None
# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#       Open URLs at the cursor location with the launcher configured in `url.launcher`.
#   - Up
#       Move the vi mode cursor up by one line.
#   - Down
#       Move the vi mode cursor down by one line.
#   - Left
#       Move the vi mode cursor left by one character.
#   - Right
#       Move the vi mode cursor right by one character.
#   - First
#       Move the vi mode cursor to the start of the line, searching across newlines if it is already at the beginning.
#   - Last
#       Move the vi mode cursor to the end of the line, searching across newlines if it is already at the end.
#   - FirstOccupied
#       Move the vi mode cursor to the first non-empty cell in this line, searching across newlines if it is already at the first one.
#   - High
#       Move the vi mode cursor to the top of the screen.
#   - Middle
#       Move the vi mode cursor to the middle of the screen.
#   - Low
#       Move the vi mode cursor to the bottom of the screen.
#   - SemanticLeft
#       Move the vi mode cursor to the start of the previous semantically separated word.
#   - SemanticRight
#       Move the vi mode cursor to the start of the next semantically separated word.
#   - SemanticLeftEnd
#       Move the vi mode cursor to the end of the previous semantically separated word.
#   - SemanticRightEnd
#       Move the vi mode cursor to the end of the next semantically separated word.
#   - WordLeft
#       Move the vi mode cursor to the start of the previous whitespace separated word.
#   - WordRight
#       Move the vi mode cursor to the start of the next whitespace separated word.
#   - WordLeftEnd
#       Move the vi mode cursor to the end of the previous whitespace separated word.
#   - WordRightEnd
#       Move the vi mode cursor to the end of the next whitespace separated word.
#   - Bracket
#       Move the vi mode cursor to the next character that matches the bracket at the cursor's
#       current location.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - SearchNext
#       Jump to the beginning of the next match.
#   - SearchPrevious
#       Jump to the beginning of the previous match.
#   - SearchStart
#       Jump to the next start of a match to the left of the vi mode cursor.
#   - SearchEnd
#       Jump to the next end of a match to the left of the vi mode cursor.
#
#   (macOS only):
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
#   (Linux/BSD only):
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - {
      key: Comma,
      mods: Command,
      command: { program: "open", args: ["~/.config/alacritty/alacritty.yml"] },
    }
  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  - { key: Key0,    mods: Command,  action: ResetFontSize }
  - { key: Equals,  mods: Command,  action: IncreaseFontSize }
  - { key: Add,     mods: Command,  action: IncreaseFontSize }
  - { key: Minus,   mods: Command,  action: DecreaseFontSize }
  - { key: Q, mods: Command, action: Quit }
  #- { key: K,      mods: Command,         action: ClearHistory     }
  #- { key: K,      mods: Command,         chars: "\x0c"            }
  #- { key: V,      mods: Command,         action: Paste            }
  #- { key: C,      mods: Command,         action: Copy             }
  #- { key: H,      mods: Command,         action: Hide             }
  # - { key: F,      mods: Command|Control, action: ToggleFullscreen }
  # alt Keys
  - { key: J, mods: Alt, chars: "\x1bj" }
  - { key: K, mods: Alt, chars: "\x1bk" }
  - { key: H, mods: Alt, chars: "\x1bh" }
  - { key: L, mods: Alt, chars: "\x1bl" }
  # SUPER arrow keys
  # xxd -psd
  - { key: W,  mods: Command,        chars: "…"      }
  - { key: J,  mods: Command,        chars: "\x1b[B" }
  - { key: K,  mods: Command,        chars: "\x1b[A" }
  - { key: H,  mods: Command,        chars: "\x1b[D" }
  - { key: L,  mods: Command,        chars: "\x1b[C" }
  - { key: H,  mods: Command|Shift,  chars: "\x1bb"  }
  - { key: L,  mods: Command|Shift,  chars: "\x1bf"  }
  # TMUX tabs
  - { key: Key1, mods: Command, chars: "\x18\x31" }
  - { key: Key2, mods: Command, chars: "\x18\x32" }
  - { key: Key3, mods: Command, chars: "\x18\x33" }
  - { key: Key4, mods: Command, chars: "\x18\x34" }
  - { key: Key5, mods: Command, chars: "\x18\x35" }
  - { key: Key6, mods: Command, chars: "\x18\x36" }
  - { key: Key7, mods: Command, chars: "\x18\x37" }
  # vim shit
  - { key: C,          mods: Command,        chars: "\x0c"         }
  - { key: Slash,      mods: Command,        chars: "\x5c\x63\x20" }
  - { key: Backslash,  mods: Command,        chars: "\xc2\xbb"     }
  - { key: Tab,        mods: Control|Shift,  chars: "Ø"            }
  - { key: Tab,        mods: Control,        chars: "∏"            }
  #
  - { key: PageUp,    chars: "\x1b[5~"                      }
  - { key: PageDown,  chars: "\x1b[6~"                      }
  - { key: Back,      chars: "\x7f"                         }
  - { key: Insert,    chars: "\x1b[2~"                      }
  - { key: Delete,    chars: "\x1b[3~"                      }
  - { key: F1,        chars: "\x1bOP"                       }
  - { key: F2,        chars: "\x1bOQ"                       }
  - { key: F3,        chars: "\x1bOR"                       }
  - { key: F4,        chars: "\x1bOS"                       }
  - { key: F5,        chars: "\x1b[15~"                     }
  - { key: F6,        chars: "\x1b[17~"                     }
  - { key: F7,        chars: "\x1b[18~"                     }
  - { key: F8,        chars: "\x1b[19~"                     }
  - { key: F9,        chars: "\x1b[20~"                     }
  - { key: F10,       chars: "\x1b[21~"                     }
  - { key: F11,       chars: "\x1b[23~"                     }
  - { key: F12,       chars: "\x1b[24~"                     }
  - { key: Home,      chars: "\x1bOH",     mode: AppCursor  }
  - { key: End,       chars: "\x1bOF",     mode: AppCursor  }
  - { key: Left,      chars: "\x1bOD",     mode: AppCursor  }
  - { key: Right,     chars: "\x1bOC",     mode: AppCursor  }
  - { key: Up,        chars: "\x1bOA",     mode: AppCursor  }
  - { key: Down,      chars: "\x1bOB",     mode: AppCursor  }
  - { key: Home,      chars: "\x1b[H",     mode: ~AppCursor }
  - { key: End,       chars: "\x1b[F",     mode: ~AppCursor }
  - { key: Left,      chars: "\x1b[D",     mode: ~AppCursor }
  - { key: Right,     chars: "\x1b[C",     mode: ~AppCursor }
  - { key: Up,        chars: "\x1b[A",     mode: ~AppCursor }
  - { key: Down,      chars: "\x1b[B",     mode: ~AppCursor }

  - { key: F5,        mods: Alt,  chars: "\x1b[15;6~" }
  - { key: F6,        mods: Alt,  chars: "\x1b[17;6~" }
  - { key: F7,        mods: Alt,  chars: "\x1b[18;6~" }
  - { key: F8,        mods: Alt,  chars: "\x1b[19;6~" }
  - { key: Up,        mods: Alt,  chars: "\x1b[1;3A"  }
  - { key: Down,      mods: Alt,  chars: "\x1b[1;3B"  }
  - { key: Right,     mods: Alt,  chars: "\x1b[1;3C"  }
  - { key: Left,      mods: Alt,  chars: "\x1b[1;3D"  }
  - { key: End,       mods: Alt,  chars: "\x1b[1;3F"  }
  - { key: Home,      mods: Alt,  chars: "\x1b[1;3H"  }
  - { key: F1,        mods: Alt,  chars: "\x1b[1;6P"  }
  - { key: F2,        mods: Alt,  chars: "\x1b[1;6Q"  }
  - { key: F3,        mods: Alt,  chars: "\x1b[1;6R"  }
  - { key: F4,        mods: Alt,  chars: "\x1b[1;6S"  }
  - { key: F9,        mods: Alt,  chars: "\x1b[20;6~" }
  - { key: F10,       mods: Alt,  chars: "\x1b[21;6~" }
  - { key: F11,       mods: Alt,  chars: "\x1b[23;6~" }
  - { key: F12,       mods: Alt,  chars: "\x1b[24;6~" }
  - { key: PageUp,    mods: Alt,  chars: "\x1b[5;3~"  }
  - { key: PageDown,  mods: Alt,  chars: "\x1b[6;3~"  }
  - { key: Back,      mods: Alt,  chars: "\x1b\x7f"   }
  - { key: D,         mods: Alt,  chars: "\x1bd"      }

  - { key: L,         mods: Control,  chars: "\x0c"       }
  - { key: F5,        mods: Control,  chars: "\x1b[15;5~" }
  - { key: F6,        mods: Control,  chars: "\x1b[17;5~" }
  - { key: F7,        mods: Control,  chars: "\x1b[18;5~" }
  - { key: F8,        mods: Control,  chars: "\x1b[19;5~" }
  - { key: Up,        mods: Control,  chars: "\x1b[1;5A"  }
  - { key: Down,      mods: Control,  chars: "\x1b[1;5B"  }
  - { key: Right,     mods: Control,  chars: "\x1b[1;5C"  }
  - { key: Left,      mods: Control,  chars: "\x1b[1;5D"  }
  - { key: F1,        mods: Control,  chars: "\x1b[1;5P"  }
  - { key: F2,        mods: Control,  chars: "\x1b[1;5Q"  }
  - { key: F3,        mods: Control,  chars: "\x1b[1;5R"  }
  - { key: F4,        mods: Control,  chars: "\x1b[1;5S"  }
  - { key: F9,        mods: Control,  chars: "\x1b[20;5~" }
  - { key: F10,       mods: Control,  chars: "\x1b[21;5~" }
  - { key: F11,       mods: Control,  chars: "\x1b[23;5~" }
  - { key: F12,       mods: Control,  chars: "\x1b[24;5~" }
  - { key: PageUp,    mods: Control,  chars: "\x1b[5;5~"  }
  - { key: PageDown,  mods: Control,  chars: "\x1b[6;5~"  }
  # - { key: L, mods: Control, action: ClearLogNotice     }

  - { key: F5,        mods: Shift,  chars: "\x1b[15;2~"              }
  - { key: F6,        mods: Shift,  chars: "\x1b[17;2~"              }
  - { key: F7,        mods: Shift,  chars: "\x1b[18;2~"              }
  - { key: F8,        mods: Shift,  chars: "\x1b[19;2~"              }
  - { key: Up,        mods: Shift,  chars: "\x1b[1;2A"               }
  - { key: Down,      mods: Shift,  chars: "\x1b[1;2B"               }
  - { key: Right,     mods: Shift,  chars: "\x1b[1;2C"               }
  - { key: Left,      mods: Shift,  chars: "\x1b[1;2D"               }
  - { key: F1,        mods: Shift,  chars: "\x1b[1;2P"               }
  - { key: F2,        mods: Shift,  chars: "\x1b[1;2Q"               }
  - { key: F3,        mods: Shift,  chars: "\x1b[1;2R"               }
  - { key: F4,        mods: Shift,  chars: "\x1b[1;2S"               }
  - { key: F9,        mods: Shift,  chars: "\x1b[20;2~"              }
  - { key: F10,       mods: Shift,  chars: "\x1b[21;2~"              }
  - { key: F11,       mods: Shift,  chars: "\x1b[23;2~"              }
  - { key: F12,       mods: Shift,  chars: "\x1b[24;2~"              }
  - { key: PageUp,    mods: Shift,  chars: "\x1b[5;2~",    mode: Alt }
  - { key: PageDown,  mods: Shift,  chars: "\x1b[6;2~",    mode: Alt }

  - { key: F5,   mods: Super,  chars: "\x1b[15;3~" }
  - { key: F6,   mods: Super,  chars: "\x1b[17;3~" }
  - { key: F7,   mods: Super,  chars: "\x1b[18;3~" }
  - { key: F8,   mods: Super,  chars: "\x1b[19;3~" }
  - { key: F1,   mods: Super,  chars: "\x1b[1;3P"  }
  - { key: F2,   mods: Super,  chars: "\x1b[1;3Q"  }
  - { key: F3,   mods: Super,  chars: "\x1b[1;3R"  }
  - { key: F4,   mods: Super,  chars: "\x1b[1;3S"  }
  - { key: F9,   mods: Super,  chars: "\x1b[20;3~" }
  - { key: F10,  mods: Super,  chars: "\x1b[21;3~" }
  - { key: F11,  mods: Super,  chars: "\x1b[23;3~" }
  - { key: F12,  mods: Super,  chars: "\x1b[24;3~" }

  - { key: Copy, action: Copy }
  - { key: Paste, action: Paste }
  - { key: PageDown, mods: Shift, action: ScrollPageDown, mode: ~Alt }
  - { key: PageUp, mods: Shift, action: ScrollPageUp, mode: ~Alt }

  - { key: NumpadEnter, chars: "\n" }

  # Vi Mode
  - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  - { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  - { key: Escape,                      mode: Vi, action: ClearSelection          }
  - { key: I,                           mode: Vi, action: ScrollToBottom          }
  - { key: I,                           mode: Vi, action: ToggleViMode            }
  - { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
  - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  - { key: G,                           mode: Vi, action: ScrollToTop             }
  - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  - { key: Y,                           mode: Vi, action: Copy                    }
  - { key: Y,                           mode: Vi, action: ClearSelection          }
  - { key: Copy,                        mode: Vi, action: ClearSelection          }
  - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  - { key: Return,                      mode: Vi, action: Open                    }
  - { key: K,                           mode: Vi, action: Up                      }
  - { key: J,                           mode: Vi, action: Down                    }
  - { key: H,                           mode: Vi, action: Left                    }
  - { key: L,                           mode: Vi, action: Right                   }
  - { key: Up,                          mode: Vi, action: Up                      }
  - { key: Down,                        mode: Vi, action: Down                    }
  - { key: Left,                        mode: Vi, action: Left                    }
  - { key: Right,                       mode: Vi, action: Right                   }
  - { key: Key0,                        mode: Vi, action: First                   }
  - { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  - { key: H,      mods: Shift,         mode: Vi, action: High                    }
  - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  - { key: B,                           mode: Vi, action: SemanticLeft            }
  - { key: W,                           mode: Vi, action: SemanticRight           }
  - { key: E,                           mode: Vi, action: SemanticRightEnd        }
  - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  - { key: Slash,                       mode: Vi, action: SearchForward           }
  - { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  - { key: N,                           mode: Vi, action: SearchNext              }
  - { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows, Linux, and BSD only)
  #- { key: V,        mods: Control|Shift,           action: Paste            }
  #- { key: C,        mods: Control|Shift,           action: Copy             }
  #- { key: F,        mods: Control|Shift,           action: SearchForward    }
  #- { key: B,        mods: Control|Shift,           action: SearchBackward   }
  #- { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  #- { key: Insert,   mods: Shift,                   action: PasteSelection   }
  #- { key: Key0,     mods: Control,                 action: ResetFontSize    }
  #- { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  #- { key: Add,      mods: Control,                 action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,                 action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  - { key: B,      mods: Command, mode: ~Vi, chars: "\x0c"            }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false


